#04 入れ子構造を使ってみよう

ネスト構造・・深すぎるとどこにどのスタイルがあたってるか
　　　　　　　分かりにくくなるので工夫が必要。深くても３層までなど

コメント
//   CSS変換後表示　されない

/*  */ CSS変換後表示　される


& その元々の親要素セレクターを指す　半角スペースを使わない例えば
&:hover {}  等々


#05 変数を使ってみよう

$ 変数の宣言
変数で使えるデータ型は（数値、文字列、真偽、色）

例えば　こんな風に　計算も出来る
$box-size:100px;

.box{
  width: $box-size;
  height: $box-size - 10px;
}

$box-size - 10px　の部分に注目しましょう。
このように計算する時は　+ - *  の前後に半角スペースを入れる
半角スペースがないと正しく計算されません。

#06 文字列を扱ってみよう

変数と文字列を　繋げる時は　 + を使うここでも前後に半角スペースを忘れず
 そして　文字列は「"」　で囲む！！
　変数を指定する時と同じ要領ですね。
例えば

$imgdir :"../img/";   　というディレクトリ階層の変数を作ります。

.box{
     background:url($imgdir + "siki.png");
    }
 
という書き方のほかに文字列の中で変数を展開させたい書き方もあります。その場合は

.box{
     backgrund: url("#{$imgdir}siki.png");
    }

違いとしては　全てを"" で囲むこと　変数を　#{} で囲むこと
さらにこの　#{} は　意味としては　この中にある式を評価するになり
#{22+23}px   のように文字の連結だけじゃなく計算も出来る。便利な使い方も！！

 #07 色を扱ってみよう
　
#brandColor :rgba(255,0,0,.9);
#mainColor :rgba(0,0,0,.7);
こんな風に書きます。

#main{
 width:90%;
  p{
   color: lighten($brandColor,30%);
   }
}
このように書くと変数で定めた色より３０％明るい色になります。
これを上手く使うとグラデーションがいい感じに作れます。

#08 @if文を使ってみよう

まずは変数を指定します
$debugMode : ture;
body{
   @if $debugMode == true{
        color :red;
    } @else{
       color:green;
   }
意味は分かりますが、使い処が？？まだわかりません。

他にもこんな使い方も
$x : 10;
  p{
   @if $x > 20 {color:green;}
  }
これをどう使いこなすのだろう？？具体例が欲しい所です。



 #09 @for, @while文を使ってみよう

@for →１づつ値が増えるような場合便利　実務的にどう使うのだ？

具体的コードは、例えばこうなります。

@for $i from 10 through 14 {　//変数$iに10～１４の値を入れての繰り返し処理を行います。
                     　　　　　
　.fs#{$i} { font-size: #{$i}px; }//最初$i は１０次は11 で１４で処理を終了。
}　
#{}　は中の式を評価します　この# の前後は半角スペースを設けないのがポイント。


@while →　繰り返しの処理　for とは使い方が若干異なる。
　　　　　　最後のカウンタ処理をしないでＳＣＳＳをコンパイルすると
　　　　　　バグるので注意が必要ではコードを書いてみます。

$i: 5;　　　←変数を５にします
@while $i <= 7 {　変数が７と同じがそれ以下なら繰り返し処理を実行
  .nav{
    height:#{$i}vh ;　←実務的にこの使い方はないでしょうね
  } $i : $i + 1;　←ここ重要！無いとバグります、なお数を２ずつ増やしたいなら
}　　　　　　　　　　+2 でもおｋ

https://goodsan.jp/wp/sassfor/　
このサイトに便利な使い方が！



 #10 リストを扱ってみよう
リストとは→似たよううなデータを纏めて管理する
複数のデータを扱える変数の形式ともいえる。

$animals : cat , dog, tiger;  

$animals というリスト変数を指定して　中身が　cat , dog, tiger

そしてそれを使うために @each を使います具体的には

@each $animal in $animals{}

・@each 　
・{}内で使う変数を指定　
・in を書いて　
・先ほど用意したリスト型変数を指定

自分の中のイメージはこんな感じです。

@eachの命令で今からリスト型変数を一つずつループして取り出します。
具体的には
$animalsの中のデータを一つずつ　
 in 　取り出して
$animal に格納して
{} の中に出力していきます。
中のデータが無くなったらループ終了です。

それからリスト型変数は、直接書いてもおｋ
その場合こうなります

@each $animal in cat, dog, tiger{}




関数を使ってみよう！！　落ち着いて一つ一つ丁寧に確認！

@function  関数名 (引数){}
floor →小数点以下切り捨て
原則、関数内の中で宣言した変数は関数の中でしか使えない
@returun  を使ってる　。。現状ここで使う
　　　　　　
調べると・・・

引数：関数とかに入れる値
戻り値：関数とかから出てくる値　return  のこと

コードはざっくりこんな感じ分かりやすくするために
ドットインストールのコードの一部を省略。
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
@function getColumnWidth($width,$count){
  $padding:10px;//関数内の変数なのでこの中でしか使えない
  $columnWidth: floor(($width - ($padding * ($count - 1))) / $count);
  @return $columnWidth;//戻り値、計算結果を関数に値を戻す
}

.grid {
  float:left;
  width: getColumnWidth(940px, 10 );
}
ーーーーーーーーーーーーーーーーーーーーーーーーーーーー
getColumnWidth()の引数に
$width→940px　　$count→10の値がそれぞれ入る

floor(($width - ($padding * ($count - 1))) / $count)　ここで計算されて

$columnWidthに変数として計算結果が入る
で
@return $columnWidth;　で計算結果が関数につまり

width: getColumnWidth(940px, 10 )　; ←この中に戻る

で　ＣＳＳ側に
ーーーーーーーーーーーーーーーーーーーーーーーー
.grid {
  float: left;
  width: 85px;　←ここに計算結果が入る
}
ーーーーーーーーーーーーーーーーーーーーーーー
 #13 ファイルを分離させてみよう

@important は廃止されるのでこの動画を学ぶのは・・うーん飛ばします。
変更してない箇所だけ　書いておきます。
パーシャルファイルには_  頭にアンダーバーを付ける。
例えば_header.scss 　
なお、読み込む時はアンダーバーと拡張子を外す。
ーーーーーーーーーーーーーーーーーーーーーー
代替学習として
@use @forward について
https://arrown-blog.com/scss-use-forward/　サイトで学習しました。

！！@use ,@forward の違い！！

@use だと
読み込ませたファイルの$変数は　　
読み込こんだファイルでしか使えない


例えば　Aファイルで$変数を定義する
　　そのAファイルをBファイルが@use で読み込んだ場合
　　もちろんBファイルでは　Aファイルで定義した$変数を使えるが
　　　さ・ら・に
　　BファイルをC ファイルが@use  で読み込んだ場合を想定しよう
　この場合CファイルではAファイルで定義した$変数を使えないのだ。

C ファイルがBファイルを経由して、
A ファイルで定義した$変数 を使うにはどうすればいいのか
ここで登場@forward 君！！
　
問題を解決するには
！！ Bファイルが　@forward を使ってA ファイルを読み込めば！！
そのあと
BファイルをC ファイルが@use  で読み込んだ場合でも
C ファイルはA ファイルの変数を使う事ができる！！

まぁ・・Cファイルから直接A ファイルを@useで読み込んでも
この問題は解決できますよね・・この経由に@forward が
一役買ってるんですね。

でもこの@forward  @useと違って直接の読み込みは出来ません
あくまで経由させること、又貸し機能しか備えていないのであしからず。
実際のコードはこんな感じに
ーーーーーーーーーーーーーーーーーーーーー
@use 'variable' as v;
@use 'base';

body{
  background:v.$theme-color;
  color: v.$theme-color;
}
ーーーーーーーーーーーーーーーーーーーーーーー
なります。@forward ちょっとややこしいので
実務上はどうなのでしょうね？？？




 #14 @mixinを使ってみよう
https://dotinstall.com/lessons/basic_sass/10214

@mixin とは　関数のようでちょっと違う・・まとめてスタイルを定義できたりする
使う時は @include で呼び出す！！

ベンダープレフィックの変換でVSCがエラー判定するのはなぜ？


通常の使い方　参考コードSCSS
@mixin round(){
  border-radius:5px;
}
.label{
  @include round;
}
変換後のCSS
.label {
  border-radius: 5px;
}

変数と引数と組み合わせた使い方
@mixin round($radius:5px){
  border-radius:$radius;
}
.label{
  @include round();
}
変換後のＣＳＳ
.label {
  border-radius: 5px;
}

引数を使う場合は
@mixin 定義したmixin名の(){ ←カッコの中に　$引数名 : 初期値
　　何かしらのCSSプロパティ:$引数名;
  }
 セレクター{
     @include  定義したmixin名()←カッコの中に値を入れると其の値が反映される
 }　　　　　　　　　　　　　　　　いれない場合初期値が反映される。


@extendを使ってみよう
https://dotinstall.com/lessons/basic_sass/10215

共通化するスタイルをまず定義して
@extend  共通化したいセレクターをしてい ;
したら使えます。たとえば
コードはこんな感じです
ーーーーーーーーーーーーーーーーーーーーーーー
.msg{
  font-size: 12px;
  font-weight:bold;
  padding: 2px 4px;
  color:white;
}

.errorMsg{
  @extend .msg;
  background: red;
 
}
.warningMsg{
  @extend .msg;
  background: lime;

}
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ＣＳＳ変換後
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
.msg, .warningMsg, .errorMsg {
  font-size: 12px;
  font-weight: bold;
  padding: 2px 4px;
  color: white;
}

.errorMsg {
  background: red;
}

.warningMsg {
  background: lime;
}
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー